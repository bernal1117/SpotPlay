openapi: 3.0.0
info:
  title: Spotplay
  description: 'Es una plataforma de musica y mas ...'
  contact:
    email: suport@spotplay.com
  license:
    name: Apache 2.0
    url: http://apac.....
  version: 1.0.0
servers:
- url: http://localhost:4000/api/v1
tags:
- name: Song
  description: In this section are the SpotPlay songs
- name: User
  description: In this section are the users of SpotPlay
- name: Playlist
  description: In this section are the SpotPlay playlist
- name: Artist
  description: In this section are the SpotPlay artists
components:
  schemas:
    Song:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        uri:
          type: string
        duration:
          type: string
        imagen: 
          type: string
        idAlbum:
          type: integer
          format: int64
        idArtist:
          type: integer
          format: int32
        idGenre:
          type: integer
          format: int32
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
    Playlist:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        imagen: 
          type: string
        idSong:
          type: integer
          format: int32
    Artist:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
        lastname: 
          type: string
        avatar:
          type: string
paths:
  /user/signup:
    post:
      tags:
      - User
      summary: Create user 
      operantionId: createUser
      description: Se creara un usuario para  utilizarlo en la aplicacion.
      requestBody:
        description: ingrese los datos del usuario a crear.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: registro exitoso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad request
          content: {}
        404:
          description: not found
          content: {}
    x-codegen-request-body-name: body
  /user/getuser:
    get:
      tags:
      - User
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesful operation
          schema:
            $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /user/deleteuser:
    delete:
      tags:
      - User
      summary: "Delete user by ID"
      description: "Delete user filter by ID and get the response"
      operationId: "DeleteUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesful operation
          schema:
            $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /user/updateuser:
    put:
      tags:
      - User
      summary: Update user 
      operantionId: Update user
      description: Update user in the application
      requestBody:
        description: ingrese los datos del usuario a hacer el update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: registro exitoso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad request
          content: {}
        404:
          description: not found
          content: {}
    x-codegen-request-body-name: body
  /song/newsong:
    post:
      tags:
      - Song
      summary: Create new Song
      operantionId: createNewSong
      description: This create a new song tu use in the application SpotPlay
      requestBody:
        description: Please insert the properties of the song
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
          application/xml:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        200:
          description: registro exitoso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        400:
          description: bad request
          content: {}
        404:
          description: not found
          content: {}
    x-codegen-request-body-name: body
  /song/allsongs:
    get:
      tags:
      - Song
      summary: "Find song by ID"
      description: "Returns song by id"
      operationId: "getSongById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "songId"
        in: "path"
        description: "ID of song to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesfull operation
          schema:
            $ref: '#/components/schemas/Song'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /song/deletesong:
    delete:
      tags:
      - Song
      summary: "Delete song by ID"
      description: "Delete song filter by ID and get the response"
      operationId: "DeleteSongById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "songId"
        in: "path"
        description: "ID of song to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesful operation
          schema:
            $ref: '#/components/schemas/Song'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /playlist/createplaylist:
    post:
      tags:
      - Playlist
      summary: Create new playlist 
      operantionId: createPlaylist
      description: You can create a new playlist in this place
      requestBody:
        description: Insert the requierments to create a playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
          application/xml:
            schema:
              $ref: '#/components/schemas/Playlist'
        required: true
      responses:
        200:
          description: registro exitoso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        400:
          description: bad request
          content: {}
        404:
          description: not found
          content: {}
    x-codegen-request-body-name: body
  /playlist/getplaylist:
    get:
      tags:
      - Playlist
      summary: "Find playlist by ID"
      description: "Returns playlist"
      operationId: "getPlaylistById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "playlistId"
        in: "path"
        description: "ID of playlist to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesful operation
          schema:
            $ref: '#/components/schemas/Playlist'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /playlist/deleteplaylist:
    delete:
      tags:
      - Playlist
      summary: "Delete playlist by ID"
      description: "Delete playlist filter by ID and get the response"
      operationId: "DeletePlaylistById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "playlistId"
        in: "path"
        description: "ID of playlist to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesful operation
          schema:
            $ref: '#/components/schemas/Playlist'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /playlist/addnewsong:
    put:
      tags:
      - Playlist
      summary: Add new song in the playlist 
      operantionId: Add new song in playlist
      description: Add new song in the playlist in the application SpotPlay
      requestBody:
        description: Insert the ID of then song to add at the playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
          application/xml:
            schema:
              $ref: '#/components/schemas/Playlist'
        required: true
      responses:
        200:
          description: registro exitoso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        400:
          description: bad request
          content: {}
        404:
          description: not found
          content: {}
    x-codegen-request-body-name: body
  /artist/newartist:
    post:
      tags:
      - Artist
      summary: Create new artist 
      operantionId: createArtist
      description: You can create a new artist in this place
      requestBody:
        description: Insert the requierments to create a new artist, you can see an example on the bottom of this page
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
          application/xml:
            schema:
              $ref: '#/components/schemas/Artist'
        required: true
      responses:
        200:
          description: registro exitoso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: bad request
          content: {}
        404:
          description: not found
          content: {}
    x-codegen-request-body-name: body
  /artist/getartist:
    get:
      tags:
      - Artist
      summary: "Find artist by ID"
      description: "Returns artist"
      operationId: "getArtistById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "artistId"
        in: "path"
        description: "ID of artist to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesful operation
          schema:
            $ref: '#/components/schemas/Artist'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /artist/deleteartist:
    delete:
      tags:
      - Artist
      summary: "Delete artist by ID"
      description: "Delete artist filter by ID and get the response"
      operationId: "DeleteArtistById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "artistId"
        in: "path"
        description: "ID of artist to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesful operation
          schema:
            $ref: '#/components/schemas/Artist'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
